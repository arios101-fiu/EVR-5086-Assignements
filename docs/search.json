[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EVR-5086 Assignments",
    "section": "",
    "text": "Introduction\nAlthough the EVR-5086 class is being taught using Python, my prior experience is with R. I am also fond of sharing my work on GitHub. I have learned how GitHub pages combined with Quarto and R Studio are an extraordinary resource for developing and maintaining lab notebooks. To get better at using these tools (and the reproducibility and accessibility of my future research) I have created a html quarto book and pdf to show my work associated with the course assignments.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#set-up",
    "href": "index.html#set-up",
    "title": "EVR-5086 Assignments",
    "section": "Set Up",
    "text": "Set Up\nI started by creating a GitHub account (username: arios101-fiu). Then, I created a GitHub repository with a gitignore and readme.md. Initially, the repository was called EVR-5086-Assignement1, but I updated it to (EVR-5086-Assignments). I cloned the repository into R Studio, thereby creating a R project. I copied in a _quarto.yml and index.qmd files from another project. I updated the files, rendered, committed, and pushed. Next, I turned on GitHub pages and updated the URLs in the yml and repository.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "assignment1/rios_evr5086_hw1.html",
    "href": "assignment1/rios_evr5086_hw1.html",
    "title": "1  Assignment 1 – Calculus Review",
    "section": "",
    "text": "Assignment 1 - Calculus Review",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 1 – Calculus Review</span>"
    ]
  },
  {
    "objectID": "assignment1/rios_evr5086_hw1.html#plot-the-polynomial",
    "href": "assignment1/rios_evr5086_hw1.html#plot-the-polynomial",
    "title": "1  Assignment 1 – Calculus Review",
    "section": "1.1 Plot the polynomial",
    "text": "1.1 Plot the polynomial\nBelow are the steps I took to complete the first part of EVR-5086 Assignment 1.\nIn doing this exercise in R, I started by loading the R libraries I will use in this chapter. I used {ggplot2} for plotting, and {tidyr} and {dplyr} for data wrangling.\n\n# Check if libraries are installed; install if not.\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(ggplot2, tidyr, dplyr)\n\nNext, I defined the variables and created the vectors I will need for the plot.\n\n# Define variables\na &lt;- 1\nn &lt;- 1\nb &lt;- 1\np &lt;- 2\nc &lt;- 1\nq &lt;- 3\n\n# Create x vector from -1 to 1\nx &lt;- seq(from = -1, to = 1, by = 0.1)\n\n# Calculate a value of y for each value of x\ny &lt;- (a * (x^n)) + (b * (x^p)) + (c * (x^q))\n\n# Calculate the analytical derivatives for each value of x\ndy_dx &lt;- (a * n * (x^(n - 1))) + (b * p * (x^(p - 1))) + (c * q * (x^(q - 1)))\n\n# Calculate the numerical derivatives between each value of x\ndeltay &lt;- diff(y)\ndeltax &lt;- diff(x)\ndeltay_deltax &lt;- deltay / deltax\n\n# For plotting purposes, derive the midpoint across the original values of x\ndeltax_vec &lt;- x[-length(x)] + deltax / 2\n\nMy next goal was to unite all of the vectors into a long data format. I did this by creating a data frame, then pivoting the data to only have the values that will be plotted on the x and y axis, as well as a label. Later, I will use my “linetype” label to define line types as well as the colors and shapes in my plot.\n\n# Build data frames and rename variables for plot\nplot_prep &lt;- data.frame(x, y, dy_dx) |&gt;\n  dplyr::rename(Polynomial = y, \"Analytical derivative\" = dy_dx)\n\n# Wrangle to long data format and bind in numerical derivative\nplot_tidy &lt;- plot_prep |&gt;\n  tidyr::pivot_longer(!x, names_to = \"linetype\", values_to = \"y\") |&gt;\n  dplyr::bind_rows(data.frame(x = deltax_vec, y = deltay_deltax,\n                              linetype = \"Numerical derivative\"))\n\nLastly, I create the plot and reflect on the observations and limitations of the numerical derivative.\nFigure 1.1 shows that the numerical derivative, shown as red open circles, is very similar to the analytical derivative, shown as a blue solid line. The good match we see relates to the scale over which we calculated the numerical derivative compared to the scale of the rate of change in the polynomial. When calculating the numerical derivative, we can get the average rate of change between two points.\nNote that for the analytical derivative we are only providing the plot with information associated with x values ranging -1 to 1, in steps of 0.1. Meanwhile, the numerical derivative is plotted at the midpoints of our original segments, with x values ranging from -0.95 to 0.95. Including the numerical derivatives in the appropriate position relative to the curved lines plotted between our analytical derivatives results in the overlay of the points and the line.\nIf the numerical derivative had a significantly lower resolution (e.g. just -1 and 1), it would not match well, and would be just one point, at x = 0, above the “U” shaped line representing the analytical derivative. Although such a wide spacing is extreme to consider, it helps to emphasize that grid spacing and location plotted are important considerations when working with numerical derivatives.\n\n# Plot the analytically derivative as a solid line\n# and the numerical derivative as open symbols\npolynomial_plot &lt;- ggplot(data = plot_tidy,\n                          aes(x = x, y = y, color = linetype)) +\n  geom_point(\n    data = dplyr::filter(plot_tidy, linetype == \"Numerical derivative\"),\n    shape = 21, stroke = 1.25\n  ) +\n  geom_line(\n    data = dplyr::filter(plot_tidy, linetype != \"Numerical derivative\")\n  ) +\n  theme(legend.title = element_blank()) +\n  scale_color_manual(values = c(4, 2, 1)) +\n  theme_minimal() +\n  theme(legend.title = element_blank()) +\n  labs(\n    title = \"Plot of polynomial with analytical and numerical derivatives\"\n  )\n\npolynomial_plot\n\n\n\n\n\n\n\nFigure 1.1: Polynomial defined by values provided in EVR-5086 Assignment 1 \\n (black line), along with analytical derivative (blue line) and numerical \\n derivative (red open circle).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 1 – Calculus Review</span>"
    ]
  },
  {
    "objectID": "assignment1/rios_evr5086_hw1.html#solve-the-2-d-laplace-in-excel",
    "href": "assignment1/rios_evr5086_hw1.html#solve-the-2-d-laplace-in-excel",
    "title": "1  Assignment 1 – Calculus Review",
    "section": "1.2 Solve the 2-D Laplace in Excel",
    "text": "1.2 Solve the 2-D Laplace in Excel\nI created a 28 by 28 grid of the 2-D Laplace Equation. I included three internal “boundary values”; one high value of 4 and two low values of -2 and -3. The two low values were near each other compared to their respective distances to the high value. I allowed excel to iteratively calculate for 10,000 iterations with a minimum change of 0.0001. I saved the file as a CSV file after including explicit zeros surrounding the formulas. The dimensions of my data were 30 by 30. I rounded to four significant digits to see if stagnation areas would be more evident by avoiding calculating of extremely small differences.\n\n1.2.1 Read in and plot contours using Python\nStart by turning on Python in R. This requires the package {reticulate} in R which embeds a Python session within the R session. The function py_require() is also used to declare Python packages that will be used in the R session.\n\n# Check if libraries are installed; install if not.\nif (!require(\"reticulate\")) install.packages(\"reticulate\")\n\nLoading required package: reticulate\n\n# Load reticulate\nlibrary(reticulate)\n\n# Ensures matplotlib package is available in the current session\nif (!py_module_available(\"matplotlib\")) py_require(c(\"matplotlib\"))\n\nThe rest of the assignment is run in Python. First, I import the numpy and matplotlib.pyplot packages and read in the CSV file that I had created in excel. To prepare the data for plotting, I create two arrays using np.linspace() and combine them into a 30 x 30 grid of x and y coordinates using np.meshgrid(). Finally, the partial derivatives for h with respect to x and y are calculated using np.gradient().\n\n# Import packages\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load csv file from excel\nh = np.loadtxt('tripole.csv',delimiter=',')\n\n# Create a grid of x and y coordinates\nx_vec = np.linspace(-1.5, 1.4, 30)\ny_vec = np.linspace(-1.5, 1.4, 30)\nX, Y = np.meshgrid(x_vec, y_vec)\n\n# Calculate gradient/partial derivatives\n[dhdy, dhdx] = np.gradient(h, y_vec, x_vec)\n\n# Round to 4 significant figures\ndhdy4 = np.round(dhdy, 4)\ndhdx4 = np.round(dhdx, 4)\n\nFigure 1.2 recreates the surface plot that perviously had been explored in Excel. The x- and y-axis range from -1.5 to 1.4, while the h-axis ranges from -3 to 4. Figure 1.3 shows a contour map with flow vectors. Finally, Figure 1.4 provides a similar plot to Figure 1.3, but with streamlines instead of arrows.\nReviewing the contours, flow vectors, and streamlines I did not identify stagnation points. When I selected the two low points, I was expecting a stagnation “saddle effect”. However, the proximity and the similarity in values I used did not result in a stagnation area. Interestingly, the majority of the surface plotted consisted of extensive areas of very low gradients. Figure 1.4 shows that the streams would run beyond the edges across approximately 60% of the plotted grid.\nThe following three Python code chunks created Figure 1.2, Figure 1.3 and Figure 1.4, respectively.\n\n\n1.2.2 Surface plot\n\nfig = plt.figure(figsize = [4, 4], dpi = 300) #Create empty figure\nax = plt.axes(projection = '3d') # Create plot region\nax.set_title(\" \" * 20 + 'Surface plot'+ \" \" * 20)  # Include plot title and pad space for h-axis label\nax.set_xlabel('x-axis') # Include x-axis label\nax.set_ylabel('y-axis')  # Include y-axis label\nax.set_zlabel('h-axis', rotation = 90) # Include vertical h-axis label\nsurf = ax.plot_surface(X,Y,h) # Plot surface\nplt.show() # Render plot\n\n\n\n\n\n\n\nFigure 1.2: Plot of vector arrows using Python. The vectors indicate strength and direction of the negative gradient. The vectors are displayed over the contours of a tri-pole solution with a high value of 4 and lows of -2 and -3. The two low values were near each other compared to their respective distances to the high value.\n\n\n\n\nplt.close('all') # Prevent accidental overplotting onto an old figure\n\n\n\n1.2.3 Plot contour map and flow vectors\n\n# Plot contour map and flow vectors\nplt.contourf(X, Y, h) # Draw contours for h on grid coordinates (x,Y)\ncbar = plt.colorbar() # Add colorbar\ncbar.set_label('Ground water potential surface (h)') # Include lable on colorbar\nplt.axis('equal'); # Force equal scaling on x and y\n\n(np.float64(-1.5), np.float64(1.4), np.float64(-1.5), np.float64(1.4))\n\nplt.title('Contour map and flow vectors') # Include plot title\nplt.xlabel('X-axis') # Include x-axis label\nplt.ylabel('Y-axis') # Include y-axis label\nqplt = plt.quiver(X, Y, -dhdx4, -dhdy4, scale = 360) # Draw vector arrows; note: large scales values make smaller arrows\nplt.show() # Render plot\n\n\n\n\n\n\n\nFigure 1.3: Plot of vector arrows using Python. The vectors indicate strength and direction of the negative gradient. The vectors are displayed over the contours of a tri-pole solution with a high value of 4 and lows of -2 and -3. The two low values were near each other compared to their respective distances to the high value.\n\n\n\n\nplt.close('all') # Prevent accidental overplotting onto an old figure",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 1 – Calculus Review</span>"
    ]
  },
  {
    "objectID": "assignment1/rios_evr5086_hw1.html#plot-streamlines-instead-of-arrows-in-sec-contour",
    "href": "assignment1/rios_evr5086_hw1.html#plot-streamlines-instead-of-arrows-in-sec-contour",
    "title": "1  Assignment 1 – Calculus Review",
    "section": "1.3 Plot streamlines instead of arrows in Section 1.2.3",
    "text": "1.3 Plot streamlines instead of arrows in Section 1.2.3\n\n# Plot contour map streamlines\nplt.contourf(X, Y, h) # Draw contours for h on grid coordinates (x,Y)\ncbar = plt.colorbar() # Add colorbar\ncbar.set_label('Ground water potential surface (h)') # Include lable on colorbar\nplt.axis('equal'); # Force equal scaling on x and y\n\n(np.float64(-1.5), np.float64(1.4), np.float64(-1.5), np.float64(1.4))\n\nplt.title('Contour map and streamlines') # Include plot title\nplt.xlabel('X-axis') # Include x-axis label\nplt.ylabel('Y-axis') # Include y-axis label\nplt.streamplot(X, Y, -dhdx4, -dhdy4) # Draw streamlines\n\n&lt;matplotlib.streamplot.StreamplotSet object at 0x000001E89F5B7E10&gt;\n\nplt.show() # Render plot\n\n\n\n\n\n\n\nFigure 1.4: Plot of streamlines using Python. The streamlines are displayed over the contours of a tri-pole solution with a high value of 4 and lows of -2 and -3. The two low values were near each other compared to their respective distances to the high value.\n\n\n\n\nplt.close('all') # Prevent accidental overplotting onto an old figure",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 1 – Calculus Review</span>"
    ]
  },
  {
    "objectID": "assignment1/rios_evr5086_hw1.html#links-to-colab-and-github",
    "href": "assignment1/rios_evr5086_hw1.html#links-to-colab-and-github",
    "title": "1  Assignment 1 – Calculus Review",
    "section": "1.4 Links to Colab and GitHub",
    "text": "1.4 Links to Colab and GitHub\nDraft code on Colab\nQuarto book chapter on GitHub",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Assignment 1 – Calculus Review</span>"
    ]
  },
  {
    "objectID": "assignment2/rios_evr5086_hw2.html",
    "href": "assignment2/rios_evr5086_hw2.html",
    "title": "2  Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks",
    "section": "",
    "text": "Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks</span>"
    ]
  },
  {
    "objectID": "assignment2/rios_evr5086_hw2.html#data-retrieval-and-parsing",
    "href": "assignment2/rios_evr5086_hw2.html#data-retrieval-and-parsing",
    "title": "2  Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks",
    "section": "2.1 Data Retrieval and Parsing",
    "text": "2.1 Data Retrieval and Parsing\n\n# Check if libraries are installed; install if not.\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(here, curl, tidyr, dplyr, lubridate)\n\n\n# Specify the source and output file name and location\nurl &lt;- \"https://www.nhc.noaa.gov/data/hurdat/hurdat2-1851-2024-040425.txt\"\ndestfile &lt;- here(\"assignment2\",\"hurdat.txt\")\n\n# Download and save the dataset\ncurl_download(url = url, destfile = destfile)\n\n\n# Read in data and differentiate between headers and data lines\nlines &lt;- readLines(\"hurdat.txt\")                     # Read text file\n\n# Prep headers\nstorm_headers &lt;- lines[grepl(\"^AL\", lines)]          # Keep only storm headers\nheader_parts &lt;- strsplit(storm_headers, \",\")         # Split based on \",\"\nheader_matrix &lt;- do.call(rbind, header_parts)        # Convert to matrix\nheader_df &lt;- as.data.frame(header_matrix)            # Convert to data frame\ncolnames(header_df) &lt;- c(\"storm_id\", \"name\", \"rows\") # Name columns\n\n# Repeat each header based on the 'rows' column in tidyr\nheader_expand &lt;- header_df |&gt;\n  mutate(rows = as.numeric(rows)) |&gt;\n  uncount(rows)\n\n# Prep data\nstorm_data &lt;- lines[!grepl(\"^AL\", lines)] # Keep only data\nhurdat_parts &lt;- strsplit(storm_data, \",\")   # Split based on \",\"\nhurdat_matrix &lt;- do.call(rbind, hurdat_parts) # Convert to matrix\nhurdat_df &lt;- as.data.frame(hurdat_matrix)     # Convert to to data frame\n\nhurdat_fields &lt;- c(\"yyyymmdd\", \"hhmm\", \"record\", \"status\", \n                 \"lat_hemi\", \"lon_hemi\", \"wind\", \"pressure\",\n                 \"ne34\", \"se34\", \"sw34\", \"nw34\",\n                 \"ne50\", \"se50\", \"sw50\", \"nw50\",\n                 \"ne64\", \"se64\", \"sw64\", \"nw64\", \"radius\")\n\ncolnames(hurdat_df) &lt;- hurdat_fields # Name columns\n\n# Build analysis ready data set\nhurdat_ar &lt;- header_expand |&gt;\n  bind_cols(hurdat_df) |&gt; # Glue together storm id and name with data\n  mutate(\n    yyyymmdd = ymd(yyyymmdd),                   # Tell R this is a date\n    hhmm = strptime(hhmm, format = \"%H%M\"),     # Tell R this is a time\n    hhmm = format(hhmm, \"%H:%M\"),\n    lat = as.numeric(substr(lat_hemi, 1, nchar(lat_hemi)-1)), # Remove \"S\"\n    lon = as.numeric(substr(lon_hemi, 1, nchar(lon_hemi)-1)), # Remove \"W\"\n    lat_hemi = substr(lat_hemi, nchar(lat_hemi), nchar(lat_hemi)),\n    lon_hemi = substr(lon_hemi, nchar(lon_hemi), nchar(lon_hemi)),\n    lat = if_else(lat_hemi == \"S\", -lat, lat), # Make lat negative if \"S\"\n    lon = if_else(lon_hemi == \"W\", -lon, lon)  # Make lon negative if \"W\"\n  ) |&gt;\n  mutate_at(c(9:25), as.numeric) |&gt;                  # Make data numeric\n  mutate(across(where(is.numeric), ~na_if(., -999))) # Replace NAs\n\n# Save formatted data to read into next quarto environment\nsaveRDS(hurdat_ar, file = here(\"assignment2\", \"hurdat.rds\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks</span>"
    ]
  },
  {
    "objectID": "assignment2/rios_evr5086_hw2.html#data-visualization",
    "href": "assignment2/rios_evr5086_hw2.html#data-visualization",
    "title": "2  Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks",
    "section": "2.2 Data Visualization",
    "text": "2.2 Data Visualization\n\n# Check if libraries are installed; install if not.\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(here, stringr, leaflet, webshot2)\n\n\n# Read in data \nhurdat_ar &lt;- readRDS(\"hurdat.Rds\")\n\n# Create a reusable function\ntrack_storm &lt;- function(dat, storm_id, zoom = 4,\n                            init_location = c(20, -50)) {\n  # Filter and order the points for the selected storm\n  storm &lt;- dat |&gt;\n    filter(storm_id == !!storm_id, !is.na(lat), !is.na(lon)) |&gt;\n    mutate(status = str_trim(status)) |&gt;\n    arrange(yyyymmdd, hhmm)\n\n  if (nrow(storm) == 0) stop(\"No points found for this storm_id.\")\n\n  # Build popup: date + time + status (e.g., \"1851-06-25 00:00 — HU\")\n  popup_txt &lt;- paste0(\n    format(storm$yyyymmdd, \"%Y-%m-%d\"), \" \", storm$hhmm,\n    \" — \", storm$status\n  )\n  \n  # Create map\n  m &lt;- leaflet(options = leafletOptions(worldCopyJump = TRUE)) |&gt;\n    addTiles() |&gt;\n    setView(lng = init_location[2], lat = init_location[1], zoom = zoom) |&gt;\n    addPolylines(\n      lng = storm$lon,\n      lat = storm$lat,\n      color = \"blue\",\n      weight = 2.5,\n      opacity = 1\n    ) |&gt;\n    addMarkers(\n      lng = storm$lon,\n      lat = storm$lat,\n      popup = popup_txt\n    )\n  \n  file_html &lt;- here(\"assignment2\", paste0(storm_id, \"_map.html\"))\n  htmlwidgets::saveWidget(m, file_html, selfcontained = TRUE)\n  m\n}\n\nleaflet_png &lt;- function(m) {\n  file_png = here(\"assignment2\", \"hurricane_tracks_map.png\")\n  html_tmp &lt;- here(\"assignment2\", \"hurricane_tracks_map_tmp.html\")\n  htmlwidgets::saveWidget(m, html_tmp, selfcontained = TRUE)\n  webshot2::webshot(html_tmp, file = file_png, vwidth = 1400, \n                    vheight = 900, zoom = 1)\n  return(file_png)\n}\n\n\nm &lt;- track_storm(hurdat_ar, storm_id = \"AL092021\")\nm",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks</span>"
    ]
  },
  {
    "objectID": "assignment2/rios_evr5086_hw2.html#links-to-colab-and-github",
    "href": "assignment2/rios_evr5086_hw2.html#links-to-colab-and-github",
    "title": "2  Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks",
    "section": "2.3 Links to Colab and GitHub",
    "text": "2.3 Links to Colab and GitHub\nAssignment 2 Google Colab\nQuarto book chapter on GitHub",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Assignment 2 - Reading On-line Data and Visualizing Hurricane Tracks</span>"
    ]
  }
]